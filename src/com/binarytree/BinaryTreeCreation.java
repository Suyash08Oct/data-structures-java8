package com.binarytree;

/**
 * Creating Binary Tree with the help of Pre-Order and In-Order Traversal
 */
public class BinaryTreeCreation {

    private static int preOrderIndex = 0;
    private static int postOrderIndex;

    public static void main(String[] args) {
        int [] preOrder = {8, 3, 12, 4, 9, 7, 5, 10, 6, 2};
        int [] inOrder =  {12, 9, 4, 7, 3, 8, 10, 5, 2, 6};
        int [] postOrder = {9, 7, 4, 12, 3, 10, 2, 6, 5, 8};

        //Initialization
        postOrderIndex = postOrder.length - 1;

        Node preOrderRoot = buildTree(0, inOrder.length - 1, preOrder, inOrder);
        Node postOrderRoot = buildTree(postOrder, inOrder, 0, inOrder.length-1);


        // For Testing if tree generated by both the methods are same or not.
        BinaryTree.levelOrder(preOrderRoot);
        BinaryTree.levelOrder(postOrderRoot);

    }

    /**
     * This Method is for Creation of Binary Tree, with the help of pre-order and in-order traversal.
     */
    public static Node buildTree(int start, int end, int[] preOrder, int[] inOrder){
        if(start > end){
            return null;
        }

        Node root = new Node(preOrder[preOrderIndex]);

        // Incrementing of Root Index is the most important step, bcz it will be the root index of all the sub-trees
        preOrderIndex = preOrderIndex + 1;

        int inIndex = 0;

        for(int i = start; i <= end; i++){
            if(inOrder[i] == root.value){
                inIndex = i;
                break;
            }
        }

        root.left = buildTree(start, inIndex - 1, preOrder, inOrder);
        root.right = buildTree(inIndex + 1, end, preOrder, inOrder);

        return root;

    }

    /**
     * This Method is for Creation of Binary Tree, with the help of post-order and in-order traversal.
     */
    public static Node buildTree(int[] postOrder, int[] inOrder, int start, int end){
        if(start > end){
            return null;
        }

        Node root = new Node(postOrder[postOrderIndex]);
        postOrderIndex = postOrderIndex - 1;

        int inIndex = 0;

        for(int i = start; i <= end; i++){
            if(inOrder[i] == root.value){
                inIndex = i;
                break;
            }
        }


        root.right = buildTree(postOrder, inOrder, inIndex + 1, end);
        root.left = buildTree(postOrder, inOrder, start, inIndex - 1);

        return root;

    }
}
